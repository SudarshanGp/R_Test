var fs = require('fs');

module.exports = function(app_file, callb){
	var tmpRouteCache = []
		,	tmpFileCache = [];
		
	fs.readFile(app_file, 'utf8', function(err, data){
		if (err) console.log('Error parsing file: ' + app_file);
		
		var lines = data.split('\n');
		// for require statements
		var require_regex = /\s+,?\s*([a-z|A-Z|0-9|\_|\-|\.]+)\s*\=\s*require\(\s*[\'|\"](.*\/.+)[\'|\"]\s*\)/;
		// for route statements
		var route_regex = /^app\.(get|post|delete|puts)\([\'|\"](.*)[\'|\"]\s*\,\s*(.*)\);?/;
		// for route statements, if they have a inline function as
		// a callback
		var inlineFunc_regex = /function\s*\(/;
		
		lines.forEach(function(l){
			var require_regex_results = l.match(require_regex);
			var route_regex_results = l.match(route_regex);
			
			if (require_regex_results) {
				//console.log(require_regex_results[1] +' - '+ require_regex_results[2]);
				var fileObj = {varName: require_regex_results[1], filePath: require_regex_results[2]}
				tmpFileCache.unshift(fileObj);
			} else if (route_regex_results) {
				// 1 is method, 2 is path, 3 is callbacks
				// route has a inline function ?
				if (route_regex_results[0].match(inlineFunc_regex)) { 
					console.log('In line function for route (' + route_regex_results[1] + ' ' + route_regex_results[2] + '), not supported');
				} else {
					var routeObj = {'method': route_regex_results[1], 'path': route_regex_results[2], 'callbacks': route_regex_results[3].replace(' ', '').split(',') };
					//console.log('found route (' + route_regex_results[1] + ' ' + route_regex_results[2] + ' ' + route_regex_results[3] + ')');
					tmpRouteCache.unshift(routeObj);
				};
			};
		});
		callb(tmpRouteCache, tmpFileCache);
	});
}